#+TITLE: Work Environment
#+PROPERTY: header-args :mkdirp yes

* Table of Contents :TOC@4:
- [[#summary][Summary]]
- [[#installation][Installation]]
  - [[#1-copy-configuration-to-host-machine][1. Copy configuration to host machine]]
  - [[#2-install-packages-from-manifest][2. Install packages from manifest]]
  - [[#3-install-missing-tools-from-nix][3. Install missing tools from Nix]]
  - [[#4-setup-emacs][4. Setup Emacs]]
- [[#setup][Setup]]
  - [[#node][Node]]
  - [[#deno][Deno]]
  - [[#rust][Rust]]

* Summary

This document walks through the process of setting up the host machine for programming and software
development. Emacs is the fulcrum of my entire workflow, so much of the setup is simply getting my
tools onto the machine and letting [[https://github.com/cr-jr/C4][my Emacs configuration]] do the rest.

* Installation

** 1. Copy configuration to host machine

#+BEGIN_SRC shell
stow -d $SYSCONFIG -t $HOME work
#+END_SRC

** 2. Install packages from manifest

#+BEGIN_SRC shell
guix package \
     --manifest=$GUIX_MANIFESTS/guix-work-manifest.scm --profile=$GUIX_EXTRA_PROFILES/work/work
#+END_SRC

Where =guix-work-manifest.scm= contains:

#+BEGIN_SRC scheme :tangle work/.guix-manifests/guix-work-manifest.scm
;; This manifest contains Guix packages for my work and study.

(specifications->manifest
 '("emacs-next-pgtk"
   "node@14"
   "quickjs"
   "make"
   "guile"
   "racket"
   "sbcl"
   "clang-toolchain"
   "gcc-toolchain"
   "exercism@3"))
#+END_SRC

** 3. Install missing tools from Nix

#+BEGIN_SRC shell
nix-env -iA nixpkgs.deno nixpkgs.rustup nixpkgs.rakudo
#+END_SRC

** 4. Setup Emacs

#+BEGIN_SRC shell
set -Ux EMACSD "$HOME/.config/emacs"
git clone https://github.com/cr-jr/C4.git $EMACSD
emacs --script $EMACSD/init.el
#+END_SRC

* Setup

** Node

What I found out is that by default the Guix npm store directory is unwritable. So I needed to set a
custom prefix before I could install node packages.

#+BEGIN_SRC shell
# Create a variable for the target directory and create it
set -Ux $NPM_GLOBAL_PKGS "$HOME/.npm-global"
mkdir $NPM_GLOBAL_PKGS

# Next, tell npm about it and install some core packages
npm config set prefix $NPM_GLOBAL_PKGS
npm i -g yarn prettier stylelint

# Finally, append them to path for use
set -Ux fish_user_paths $NPM_GLOBAL_PKGS/bin
which yarn
#+END_SRC

** Deno

Deno also needs the environment variable =DENO_INSTALL_ROOT= to be defined before I can install and
use command line modules like [[https://github.com/nestdotland/eggs][=eggs=]].

#+BEGIN_SRC shell
# Define the deno install directory
set -Ux DENO_INSTALL_ROOT "$HOME/.deno"
mkdir $DENO_INSTALL_ROOT

# Install some modules
deno install -Afq --unstable -n eggs https://x.nest.land/eggs@0.3.9/eggs.ts
deno install -Afq --unstable -n denon https://deno.land/x/denon/denon.ts
which eggs
#+END_SRC

** Rust

For Rust, I need to install some toolchains through =rustup=.

#+BEGIN_SRC shell
rustup toolchain install stable # for stable build
rustup toolchain install nightly # for nightly build
rustup default stable # set stable as the default toolchain
#+END_SRC

And then I need to install the Rust Language Server.

#+BEGIN_SRC shell
rustup component add rls
#+END_SRC
