#+TITLE: Shell Setup
#+PROPERTY: header-args :mkdirp yes

* Table of Contents :TOC@4:
- [[#summary][Summary]]
- [[#installation][Installation]]
- [[#plugins][Plugins]]
  - [[#z][z]]
  - [[#fishtape][fishtape]]
  - [[#bass][bass]]
- [[#profile-setup][Profile Setup]]
  - [[#guix][Guix]]
    - [[#1-initialize-profiles][1. Initialize profiles]]
    - [[#2-activate-profiles][2. Activate profiles]]
  - [[#nix][Nix]]
    - [[#1-activate-profile][1. Activate profile]]
    - [[#2-add-package-channel][2. Add package channel]]
    - [[#3-install-a-dummy-package][3. Install a dummy package]]
- [[#prompt][Prompt]]
  - [[#1-install][1. Install]]
  - [[#2-initialize][2. Initialize]]
  - [[#3-configure][3. Configure]]
- [[#version-control][Version Control]]
- [[#ssh-setup][SSH Setup]]
  - [[#1-install-fish_ssh_agent][1. Install fish_ssh_agent]]
    - [[#2-autostart-on-login][2. Autostart on login]]
    - [[#3-configure-1][3. Configure]]
- [[#theme][Theme]]
  - [[#1-install-wpgtk-and-dependencies][1. Install wpgtk and dependencies]]
  - [[#2-download-my-wallpaper][2. Download my wallpaper]]
  - [[#3-configure-2][3. Configure]]
- [[#extra-packages][Extra packages]]
  - [[#directory][Directory]]
- [[#extra-aliases][Extra aliases]]
  - [[#terminal-clearing][Terminal clearing]]

* Summary

#+BEGIN_QUOTE
The system defined in System.org *must be installed* for any of the below configurations to work.
#+END_QUOTE

After my system installation, but before setting up my desktop environment, I need to set up my
shell environment. This means ensuring that my shell finds my Guix/Nix profiles and the required
plugins are installed.

* Installation

#+BEGIN_SRC shell
stow -d $SYSCONFIG -t $HOME shell
#+END_SRC

* Plugins

My shell of choice is Fish. The main thing I do is grab some extra plugins for functionality and a useful prompt. And the easiest way to manage them is [[https://github.com/jorgebucaran/fisher][fisher]].

#+BEGIN_SRC shell
curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher
#+END_SRC

** z

[[https://github.com/jethrokuan/z][z]] fish is a port of a [[https://github.com/rupa/z][ZShell plugin of the same name]]. It allows me to quickly jump to any directory I've visited recently through fuzzy searching.

#+BEGIN_SRC shell
fisher install jethrokuan/z
#+END_SRC

** fishtape

[[https://github.com/jorgebucaran/fishtape][Fishtape]] is a test runner for fish shell. I mainly use it to help me test scripts and ensure that my environment is behaving as it should.

#+BEGIN_SRC shell
fisher install jorgebucaran/fishtape
#+END_SRC

** bass

#+BEGIN_QUOTE
Bass does /not/ export bash variables as universal variables, so the script must be executed within
=config.fish= for its output to carry across sessions.
#+END_QUOTE

[[https://github.com/edc/bass][Bass]] is a POSIX shell compatibility layer for fish. It allows me to use Bash utilities in fish shell
without having to port the script. This plugin streamlines necessary environment configurations and
variable assignments that otherwise expect Bash to be the primary shell.

#+BEGIN_SRC shell
fisher install edc/bass
#+END_SRC

* Profile Setup

** Guix

*** 1. Initialize profiles

#+BEGIN_SRC shell
# Setup default profile. Install a dummy package
set -Ux GUIX_PROFILE "$HOME/.guix-profile"
guix install hello; and which hello; and hello

# Setup desktop, work, addons. Installation documented in their respective modules
set -Ux GUIX_EXTRA_PROFILES "$HOME/.guix-extra-profiles"
mkdir -p $GUIX_EXTRA_PROFILES/{desktop,work,addons}

# Set an environment variable to refer to package manifests (once generated)
set -Ux $GUIX_MANIFESTS "$HOME/.guix-manifests"
#+END_SRC

*** 2. Activate profiles

#+BEGIN_SRC shell :tangle shell/.config/fish/config.fish
# Activate default profile
bass source $GUIX_PROFILE/etc/profile

# Activate extra profiles
bass source $GUIX_EXTRA_PROFILES/desktop/desktop/etc/profile
bass source $GUIX_EXTRA_PROFILES/work/work/etc/profile
bass source $GUIX_EXTRA_PROFILES/addons/addons/etc/profile
#+END_SRC

** Nix

*** 1. Activate profile

#+BEGIN_SRC shell :tangle shell/.config/fish/config.fish
# Setup Nix profile
bass source /run/current-system/profile/etc/profile.d/nix.sh
#+END_SRC

*** 2. Add package channel

#+BEGIN_SRC shell
nix-channel --add https://nixos.org/channels/nixpkgs-unstable nixpkgs
nix-channel --update
#+END_SRC

*** 3. Install a dummy package
#+BEGIN_SRC shell
nix-env -i hello; and which hello; and hello
#+END_SRC

* Prompt

** 1. Install

#+BEGIN_SRC shell
nix-env -i starship
#+END_SRC

** 2. Initialize

#+BEGIN_SRC shell :tangle shell/.config/fish/config.fish
# Launch the starship
starship init fish | source
#+END_SRC

** 3. Configure

#+BEGIN_SRC conf-toml :tangle shell/.config/starship.toml
add_newline = false

[line_break]
disabled = true

[username]
show_always = true
format = '[$user]($style)@'

[hostname]
ssh_only = false
format = '[$hostname]($style) '

[git_metrics]
disabled = false
#+END_SRC

* Version Control

#+BEGIN_SRC shell
nix-env -iA nixpkgs.diff-so-fancy
#+END_SRC

#+BEGIN_SRC conf-unix :tangle shell/.gitconfig
[user]
  email = crjr.code@protonmail.com
  name = Chatman R. Jr
[core]
  pager = diff-so-fancy | less --tabs=4 -RFX
[color]
  ui = true
[color "diff-highlight"]
  oldNormal = red bold
  oldHighlight = red bold 52
  newNormal = green bold
  newHighlight = green bold 22
[color "diff"]
  meta = yellow
  frag = magenta bold
  commit = yellow bold
  old = red bold
  new = green bold
  whitespace = red reverse
[diff-so-fancy]
  first-run = false
[init]
  defaultBranch = main
[github]
  user = cr-jr
#+END_SRC

* SSH Setup

** 1. Install [[https://github.com/ivakyb/fish_ssh_agent][fish_ssh_agent]]

#+BEGIN_SRC shell
wget https://gitlab.com/kyb/fish_ssh_agent/raw/master/functions/fish_ssh_agent.fish -P ~/.config/fish/functions/
#+END_SRC

*** 2. Autostart on login

#+BEGIN_SRC shell :tangle shell/.config/fish/config.fish
# Activate ssh agent
fish_ssh_agent
#+END_SRC

*** 3. Configure

#+BEGIN_SRC conf :tangle shell/.ssh/config
AddKeysToAgent yes
#+END_SRC

* Theme

The first place my theme gets applied is in the TTY, so it makes sense to define it at the shell level rather than the desktop level. My theme generates its colors from a wallpaper and uses wpgtk to apply them across my interfaces.

** 1. Install wpgtk and dependencies

#+BEGIN_SRC shell
# Download pywal, wpgtk, imagemagick, and colorz backend
# python2 is needed for GTK2 reload and feh for setting the wallpaper
nix-env -iA \
  nixpkgs.python2Full nixpkgs.imagemagick nixpkgs.feh \
  nixpkgs.pywal nixpkgs.colorz nixpkgs.wpgtk
#+END_SRC

** 2. Download my wallpaper

#+BEGIN_SRC shell
# Download wallpaper
set -x WALLPAPER_DIR "$HOME/Pictures/Wallpapers"
mkdir -p $WALLPAPER_DIR
curl -o $WALLPAPER_DIR/liftoff.jpg \
     https://curatedwallpapers.com/wp-content/uploads/Lift-Off-space-minimalism-rocket-technology-future-scaled.jpg
#+END_SRC

** 3. Configure

#+BEGIN_SRC shell
# Set palette, auto-adjust for contrast, reapply
wpg --alpha 90 -a $WALLPAPER_DIR/liftoff.jpg; and wpg -s liftoff.jpg
wpg -A (wpg -c); and wpg -s (wpg -c)

# Install default GTK theme and icon templates, reapply
wpg-install.sh -gi; wpg -s (wpg -c)

# Check the theme in my TTY
bass source $HOME/.cache/wal/colors-tty.sh; and wpg --preview
#+END_SRC

#+BEGIN_SRC shell :tangle shell/.config/fish/config.fish
# Autoload TTY theme on login
bass source $HOME/.cache/wal/colors-tty.sh
#+END_SRC


* Extra packages

** Directory

#+BEGIN_SRC shell
nix-env -iA nixpkgs.lsd
alias -s ls=lsd
alias -s tree="ls --tree"
#+END_SRC

* Extra aliases

** Terminal clearing

#+BEGIN_SRC shell
# terminal clearing
alias -s clear='printf "\033c"'
#+END_SRC
